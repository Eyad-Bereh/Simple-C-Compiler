/* Generated By:JavaCC: Do not edit this line. C_CompilerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface C_CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int BASE_8 = 8;
  /** RegularExpression Id. */
  int BASE_10 = 9;
  /** RegularExpression Id. */
  int BASE_16 = 10;
  /** RegularExpression Id. */
  int NUMBER = 11;
  /** RegularExpression Id. */
  int OPEN_CB = 12;
  /** RegularExpression Id. */
  int CLOSE_CB = 13;
  /** RegularExpression Id. */
  int OPEN_P = 14;
  /** RegularExpression Id. */
  int CLOSE_P = 15;
  /** RegularExpression Id. */
  int COLON = 16;
  /** RegularExpression Id. */
  int SEMICOLON = 17;
  /** RegularExpression Id. */
  int COMMA = 18;
  /** RegularExpression Id. */
  int ASSIGN = 19;
  /** RegularExpression Id. */
  int EQUAL_CMP = 20;
  /** RegularExpression Id. */
  int NOT_EQUAL_CMP = 21;
  /** RegularExpression Id. */
  int GT_CMP = 22;
  /** RegularExpression Id. */
  int LT_CMP = 23;
  /** RegularExpression Id. */
  int GTE_CMP = 24;
  /** RegularExpression Id. */
  int LTE_CMP = 25;
  /** RegularExpression Id. */
  int IF_STMT = 26;
  /** RegularExpression Id. */
  int ELSE_STMT = 27;
  /** RegularExpression Id. */
  int PRINTF = 28;
  /** RegularExpression Id. */
  int SCANF = 29;
  /** RegularExpression Id. */
  int WHILE_STMT = 30;
  /** RegularExpression Id. */
  int FOR_STMT = 31;
  /** RegularExpression Id. */
  int GOTO_STMT = 32;
  /** RegularExpression Id. */
  int DO_STMT = 33;
  /** RegularExpression Id. */
  int SWITCH_STMT = 34;
  /** RegularExpression Id. */
  int CASE_STMT = 35;
  /** RegularExpression Id. */
  int BREAK_STMT = 36;
  /** RegularExpression Id. */
  int DEFAULT_STMT = 37;
  /** RegularExpression Id. */
  int CHAR = 38;
  /** RegularExpression Id. */
  int STRING = 39;
  /** RegularExpression Id. */
  int BITWISE_OR = 40;
  /** RegularExpression Id. */
  int BITWISE_XOR = 41;
  /** RegularExpression Id. */
  int BITWISE_AND = 42;
  /** RegularExpression Id. */
  int SHL = 43;
  /** RegularExpression Id. */
  int SHR = 44;
  /** RegularExpression Id. */
  int NOT = 45;
  /** RegularExpression Id. */
  int INC = 46;
  /** RegularExpression Id. */
  int DEC = 47;
  /** RegularExpression Id. */
  int ADD = 48;
  /** RegularExpression Id. */
  int SUB = 49;
  /** RegularExpression Id. */
  int MUL = 50;
  /** RegularExpression Id. */
  int DIV = 51;
  /** RegularExpression Id. */
  int REM = 52;
  /** RegularExpression Id. */
  int TILDE = 53;
  /** RegularExpression Id. */
  int ADD_ASSIGN = 54;
  /** RegularExpression Id. */
  int SUB_ASSIGN = 55;
  /** RegularExpression Id. */
  int MUL_ASSIGN = 56;
  /** RegularExpression Id. */
  int DIV_ASSIGN = 57;
  /** RegularExpression Id. */
  int REM_ASSIGN = 58;
  /** RegularExpression Id. */
  int SHL_ASSIGN = 59;
  /** RegularExpression Id. */
  int SHR_ASSIGN = 60;
  /** RegularExpression Id. */
  int AND_ASSIGN = 61;
  /** RegularExpression Id. */
  int OR_ASSIGN = 62;
  /** RegularExpression Id. */
  int XOR_ASSIGN = 63;
  /** RegularExpression Id. */
  int INT_TYPE = 64;
  /** RegularExpression Id. */
  int FLOAT_TYPE = 65;
  /** RegularExpression Id. */
  int DOUBLE_TYPE = 66;
  /** RegularExpression Id. */
  int CHAR_TYPE = 67;
  /** RegularExpression Id. */
  int IDENTIFIER = 68;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<LETTER>",
    "<DIGIT>",
    "<BASE_8>",
    "<BASE_10>",
    "<BASE_16>",
    "<NUMBER>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"if\"",
    "\"else\"",
    "\"printf\"",
    "\"scanf\"",
    "\"while\"",
    "\"for\"",
    "\"goto\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"default\"",
    "<CHAR>",
    "<STRING>",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"<<\"",
    "\">>\"",
    "\"!\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"~\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"int\"",
    "\"float\"",
    "\"double\"",
    "\"char\"",
    "<IDENTIFIER>",
  };

}
