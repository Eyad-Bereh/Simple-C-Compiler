/* Generated By:JavaCC: Do not edit this line. C_Compiler.java */
import nodes.*;
import exceptions.*;
import java.util.*;
import java.io.*;

public class C_Compiler implements C_CompilerConstants {
        /*
  	public static HashMap<String, variable> variables = new HashMap<String, variable>();
	public static boolean[] markedAddresses = new boolean[0xFFFFF];

	public static boolean variableExist(String varname) {
		if (!variablesStorage.variables.containsKey(varname)) {
			return false;
		}
		return true;
	}
	
	public static variable getValue(String varname) {
		if (!variableExist(varname)) {
			throw new NoSuchVariableException(varname);
		}
		variable temp = variables.get(varname);
		return temp;
	}

	*/
  public static void main(String args []) throws ParseException , FileNotFoundException , IOException
  {

        Reader sourceFile = new FileReader("C:/Users/USER/eclipse-workspace/CD Final Project - Last Version/src/input.txt");
        SimpleCharStream scs = new SimpleCharStream(sourceFile);

    C_Compiler parser = new C_Compiler(new FileReader("C:/Users/USER/eclipse-workspace/CD Final Project - Last Version/src/input.txt"));
    try {
        treeNode root = parser.start();
        root.execute();

        for (Object v : variablesStorage.variables.entrySet()) {
                        System.out.println(v);
                }
    }
    catch (Exception e) {
        e.printStackTrace();
    }
  }

  final public treeNode start() throws ParseException {
        blockNode bNode = new blockNode();
    bNode = statements();
    jj_consume_token(0);
          {if (true) return bNode;}
    throw new Error("Missing return statement in function");
  }

  final public ifNode ifStatement() throws ParseException {
        ifNode            iNode = new ifNode();
        conditionNode cNode;
        blockNode bNode = new blockNode();
        boolean trueConditionExist = false;
    jj_consume_token(IF_STMT);
    cNode = condition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_8:
    case BASE_10:
    case BASE_16:
    case OPEN_P:
    case IF_STMT:
    case PRINTF:
    case SCANF:
    case WHILE_STMT:
    case FOR_STMT:
    case DO_STMT:
    case SWITCH_STMT:
    case ADD:
    case SUB:
    case TILDE:
    case INT_TYPE:
    case FLOAT_TYPE:
    case DOUBLE_TYPE:
    case IDENTIFIER:
      bNode = statement();
                                if ((boolean)cNode.execute()) {
                                        iNode.addChild(bNode);
                                        trueConditionExist = true;
                                }
      break;
    case OPEN_CB:
      jj_consume_token(OPEN_CB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASE_8:
        case BASE_10:
        case BASE_16:
        case OPEN_P:
        case IF_STMT:
        case PRINTF:
        case SCANF:
        case WHILE_STMT:
        case FOR_STMT:
        case DO_STMT:
        case SWITCH_STMT:
        case ADD:
        case SUB:
        case TILDE:
        case INT_TYPE:
        case FLOAT_TYPE:
        case DOUBLE_TYPE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        bNode = statements();
                                                if ((boolean)cNode.execute()) {
                                                        iNode.addChild(bNode);
                                                        trueConditionExist = true;
                                                }
      }
      jj_consume_token(CLOSE_CB);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE_STMT:
      jj_consume_token(ELSE_STMT);
      jj_consume_token(IF_STMT);
      cNode = condition();
      bNode = statement();
                        if ((boolean)cNode.execute() && !trueConditionExist) {
                                iNode.addChild(bNode);
                                trueConditionExist = true;
                        }
      break;
    case OPEN_CB:
      jj_consume_token(OPEN_CB);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASE_8:
        case BASE_10:
        case BASE_16:
        case OPEN_P:
        case IF_STMT:
        case PRINTF:
        case SCANF:
        case WHILE_STMT:
        case FOR_STMT:
        case DO_STMT:
        case SWITCH_STMT:
        case ADD:
        case SUB:
        case TILDE:
        case INT_TYPE:
        case FLOAT_TYPE:
        case DOUBLE_TYPE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        bNode = statements();
                                        if ((boolean)cNode.execute() && !trueConditionExist) {
                                                iNode.addChild(bNode);
                                                trueConditionExist = true;
                                        }
      }
      jj_consume_token(CLOSE_CB);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_CB:
    case ELSE_STMT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE_STMT:
        jj_consume_token(ELSE_STMT);
        bNode = statement();
                        if (!trueConditionExist) {
                                iNode.addChild(bNode);
                                trueConditionExist = true;
                        }
        break;
      case OPEN_CB:
        jj_consume_token(OPEN_CB);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BASE_8:
          case BASE_10:
          case BASE_16:
          case OPEN_P:
          case IF_STMT:
          case PRINTF:
          case SCANF:
          case WHILE_STMT:
          case FOR_STMT:
          case DO_STMT:
          case SWITCH_STMT:
          case ADD:
          case SUB:
          case TILDE:
          case INT_TYPE:
          case FLOAT_TYPE:
          case DOUBLE_TYPE:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          bNode = statements();
                                        if (!trueConditionExist) {
                                                iNode.addChild(bNode);
                                                trueConditionExist = true;
                                        }
        }
        jj_consume_token(CLOSE_CB);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                {if (true) return iNode;}
    throw new Error("Missing return statement in function");
  }

  final public switchNode switchStatement() throws ParseException {
        switchNode sNode = new switchNode();
        constantNode value = new constantNode();
        constantNode variable = new constantNode();
        blockNode bNode = new blockNode();
        caseNode cNode = new caseNode();
        defaultNode dNode = new defaultNode();
        boolean hasBreakStatement = false;
    jj_consume_token(SWITCH_STMT);
    jj_consume_token(OPEN_P);
    variable = expression();
                                  sNode.addChild(variable);
    jj_consume_token(CLOSE_P);
    jj_consume_token(OPEN_CB);
    label_4:
    while (true) {
                        hasBreakStatement = false;
                        cNode = new caseNode();
      jj_consume_token(CASE_STMT);
      value = expression();
      jj_consume_token(COLON);
      bNode = statements();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK_STMT:
        jj_consume_token(BREAK_STMT);
                                                 hasBreakStatement = true;
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                        cNode.addChild(value);
                        cNode.addChild(bNode);
                        cNode.setHasBreakStatement(hasBreakStatement);

                        sNode.addChild(cNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE_STMT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_STMT:
      jj_consume_token(DEFAULT_STMT);
      jj_consume_token(COLON);
      bNode = statements();
                        dNode.addChild(bNode);
                        sNode.addChild(dNode);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_CB);
                {if (true) return sNode;}
    throw new Error("Missing return statement in function");
  }

  final public conditionNode condition() throws ParseException {
        conditionNode cNode = new conditionNode();
        constantNode cNode1, cNode2;
        stringNode opNode;
    jj_consume_token(OPEN_P);
    cNode1 = expression();
    opNode = operators();
    cNode2 = expression();
    jj_consume_token(CLOSE_P);
                cNode.addChild(cNode1);
                cNode.addChild(cNode2);
                cNode.addChild(opNode);

                {if (true) return cNode;}
    throw new Error("Missing return statement in function");
  }

  final public conditionNode conditionBody() throws ParseException {
        conditionNode cNode = new conditionNode();
        constantNode cNode1, cNode2;
        stringNode opNode;
    cNode1 = expression();
    opNode = operators();
    cNode2 = expression();
                cNode.addChild(cNode1);
                cNode.addChild(cNode2);
                cNode.addChild(opNode);

                {if (true) return cNode;}
    throw new Error("Missing return statement in function");
  }

  final public scanfNode scanfStatement() throws ParseException {
        scanfNode scanf_Node = new scanfNode();
        stringNode strNode = new stringNode();
        constantNode pNode = new constantNode();
        ArrayList<constantNode> parameters = new ArrayList<constantNode>();
        Token string, identifierParameter;
        Token parameter;
    jj_consume_token(SCANF);
    jj_consume_token(OPEN_P);
    string = jj_consume_token(STRING);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      jj_consume_token(BITWISE_AND);
      parameter = jj_consume_token(IDENTIFIER);
                                                pNode = new constantNode();
                                                pNode.setValue(parameter);
                                        parameters.add(pNode);
    }
    jj_consume_token(CLOSE_P);
    jj_consume_token(SEMICOLON);
                strNode.setValue(string.image);
                scanf_Node.addChild(strNode);
                for (int i = 0; i < parameters.size(); i++) {
                        scanf_Node.addChild(parameters.get(i));
                }
                {if (true) return scanf_Node;}
    throw new Error("Missing return statement in function");
  }

  final public printfNode printfStatement() throws ParseException {
        printfNode printf_Node = new printfNode();
        stringNode strNode = new stringNode();
        constantNode pNode = new constantNode();
        ArrayList<constantNode> parameters = new ArrayList<constantNode>();
        Token string, identifierParameter;
        constantNode parameter = new constantNode();
    jj_consume_token(PRINTF);
    jj_consume_token(OPEN_P);
    string = jj_consume_token(STRING);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE_8:
      case BASE_10:
      case BASE_16:
      case OPEN_P:
      case ADD:
      case SUB:
      case TILDE:
      case IDENTIFIER:
        parameter = expression();
        break;
      case STRING:
        parameter = string();
        break;
      case CHAR:
        parameter = character();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                        parameters.add(parameter);
    }
    jj_consume_token(CLOSE_P);
    jj_consume_token(SEMICOLON);
                strNode.setValue(string.image);
                printf_Node.addChild(strNode);
                for (int i = 0; i < parameters.size(); i++) {
                        printf_Node.addChild(parameters.get(i));
                }
                {if (true) return printf_Node;}
    throw new Error("Missing return statement in function");
  }

  final public stringNode operators() throws ParseException {
        Token operator;
        stringNode sNode = new stringNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_CMP:
      operator = jj_consume_token(EQUAL_CMP);
      break;
    case NOT_EQUAL_CMP:
      operator = jj_consume_token(NOT_EQUAL_CMP);
      break;
    case GT_CMP:
      operator = jj_consume_token(GT_CMP);
      break;
    case LT_CMP:
      operator = jj_consume_token(LT_CMP);
      break;
    case GTE_CMP:
      operator = jj_consume_token(GTE_CMP);
      break;
    case LTE_CMP:
      operator = jj_consume_token(LTE_CMP);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                sNode.setValue(operator.image.toString());
                {if (true) return sNode;}
    throw new Error("Missing return statement in function");
  }

  final public stringNode arithmeticOperators() throws ParseException {
        Token operator;
        stringNode sNode = new stringNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      operator = jj_consume_token(ADD);
      break;
    case SUB:
      operator = jj_consume_token(SUB);
      break;
    case MUL:
      operator = jj_consume_token(MUL);
      break;
    case DIV:
      operator = jj_consume_token(DIV);
      break;
    case REM:
      operator = jj_consume_token(REM);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                sNode.setValue(operator.image.toString());
                {if (true) return sNode;}
    throw new Error("Missing return statement in function");
  }

  final public stringNode modificationOperators() throws ParseException {
        Token operator;
        stringNode sNode = new stringNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_ASSIGN:
      operator = jj_consume_token(ADD_ASSIGN);
      break;
    case SUB_ASSIGN:
      operator = jj_consume_token(SUB_ASSIGN);
      break;
    case MUL_ASSIGN:
      operator = jj_consume_token(MUL_ASSIGN);
      break;
    case DIV_ASSIGN:
      operator = jj_consume_token(DIV_ASSIGN);
      break;
    case REM_ASSIGN:
      operator = jj_consume_token(REM_ASSIGN);
      break;
    case AND_ASSIGN:
      operator = jj_consume_token(AND_ASSIGN);
      break;
    case OR_ASSIGN:
      operator = jj_consume_token(OR_ASSIGN);
      break;
    case XOR_ASSIGN:
      operator = jj_consume_token(XOR_ASSIGN);
      break;
    case SHL_ASSIGN:
      operator = jj_consume_token(SHL_ASSIGN);
      break;
    case SHR_ASSIGN:
      operator = jj_consume_token(SHR_ASSIGN);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                sNode.setValue(operator.image);
                {if (true) return sNode;}
    throw new Error("Missing return statement in function");
  }

  final public whileNode whileStatement() throws ParseException {
        conditionNode cNode;
        blockNode bNode = new blockNode();
        whileNode wNode = new whileNode();
    jj_consume_token(WHILE_STMT);
    cNode = condition();
                                       wNode.addChild(cNode);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_8:
    case BASE_10:
    case BASE_16:
    case OPEN_P:
    case IF_STMT:
    case PRINTF:
    case SCANF:
    case WHILE_STMT:
    case FOR_STMT:
    case DO_STMT:
    case SWITCH_STMT:
    case ADD:
    case SUB:
    case TILDE:
    case INT_TYPE:
    case FLOAT_TYPE:
    case DOUBLE_TYPE:
    case IDENTIFIER:
      bNode = statement();
                                wNode.addChild(bNode);
      break;
    case OPEN_CB:
      jj_consume_token(OPEN_CB);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASE_8:
        case BASE_10:
        case BASE_16:
        case OPEN_P:
        case IF_STMT:
        case PRINTF:
        case SCANF:
        case WHILE_STMT:
        case FOR_STMT:
        case DO_STMT:
        case SWITCH_STMT:
        case ADD:
        case SUB:
        case TILDE:
        case INT_TYPE:
        case FLOAT_TYPE:
        case DOUBLE_TYPE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        bNode = statements();
                                                wNode.addChild(bNode);
      }
      jj_consume_token(CLOSE_CB);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return wNode;}
    throw new Error("Missing return statement in function");
  }

  final public doWhileNode doWhileStatement() throws ParseException {
        conditionNode cNode;
        blockNode bNode = new blockNode();
        doWhileNode wNode = new doWhileNode();
    jj_consume_token(DO_STMT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_8:
    case BASE_10:
    case BASE_16:
    case OPEN_P:
    case IF_STMT:
    case PRINTF:
    case SCANF:
    case WHILE_STMT:
    case FOR_STMT:
    case DO_STMT:
    case SWITCH_STMT:
    case ADD:
    case SUB:
    case TILDE:
    case INT_TYPE:
    case FLOAT_TYPE:
    case DOUBLE_TYPE:
    case IDENTIFIER:
      bNode = statement();
                        wNode.addChild(bNode);
      break;
    case OPEN_CB:
      jj_consume_token(OPEN_CB);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASE_8:
        case BASE_10:
        case BASE_16:
        case OPEN_P:
        case IF_STMT:
        case PRINTF:
        case SCANF:
        case WHILE_STMT:
        case FOR_STMT:
        case DO_STMT:
        case SWITCH_STMT:
        case ADD:
        case SUB:
        case TILDE:
        case INT_TYPE:
        case FLOAT_TYPE:
        case DOUBLE_TYPE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        bNode = statements();
                                        wNode.addChild(bNode);
      }
      jj_consume_token(CLOSE_CB);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(WHILE_STMT);
    cNode = condition();
                               wNode.addChild(cNode);
    jj_consume_token(SEMICOLON);
                {if (true) return wNode;}
    throw new Error("Missing return statement in function");
  }

  final public variableDeclarationNode variableDeclaration() throws ParseException {
        Token type, name, temp;
        stringNode sNode = new stringNode();
        stringNode tNode = new stringNode();
        constantNode cNode = new constantNode();
        constantNode value;
        variableDeclarationNode vdNode = new variableDeclarationNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
      type = jj_consume_token(INT_TYPE);
      break;
    case FLOAT_TYPE:
      type = jj_consume_token(FLOAT_TYPE);
      break;
    case DOUBLE_TYPE:
      type = jj_consume_token(DOUBLE_TYPE);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      cNode = expression();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                        tNode.setValue(type.image);
                        sNode.setValue(name.image);

                        vdNode.addChild(tNode);
                        vdNode.addChild(sNode);
                        vdNode.addChild(cNode);
                        {if (true) return vdNode;}
    throw new Error("Missing return statement in function");
  }

  final public variableDeclarationNode variableDeclarationBody() throws ParseException {
        Token type, name, temp;
        stringNode sNode = new stringNode();
        stringNode tNode = new stringNode();
        constantNode cNode = new constantNode();
        constantNode value;
        variableDeclarationNode vdNode = new variableDeclarationNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
      type = jj_consume_token(INT_TYPE);
      break;
    case FLOAT_TYPE:
      type = jj_consume_token(FLOAT_TYPE);
      break;
    case DOUBLE_TYPE:
      type = jj_consume_token(DOUBLE_TYPE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      cNode = expression();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                        tNode.setValue(type.image);
                        sNode.setValue(name.image);

                        vdNode.addChild(tNode);
                        vdNode.addChild(sNode);
                        vdNode.addChild(cNode);
                        {if (true) return vdNode;}
    throw new Error("Missing return statement in function");
  }

// This function is really useless ,
// nevertheless , it's here to prevent a disaster
  final public stringNode assignmentOperator() throws ParseException {
        stringNode sNode = new stringNode();
        Token t;
    t = jj_consume_token(ASSIGN);
                sNode.setValue(t.image);
                {if (true) return sNode;}
    throw new Error("Missing return statement in function");
  }

  final public modificationNode modification() throws ParseException {
        modificationNode mNode = new modificationNode();
        Token tVarName, tOperator;
        constantNode nValue;
        stringNode varName = new stringNode();
        stringNode operator;
        constantNode value = new constantNode();
    if (jj_2_1(2)) {
      tVarName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_ASSIGN:
      case SUB_ASSIGN:
      case MUL_ASSIGN:
      case DIV_ASSIGN:
      case REM_ASSIGN:
      case SHL_ASSIGN:
      case SHR_ASSIGN:
      case AND_ASSIGN:
      case OR_ASSIGN:
      case XOR_ASSIGN:
        operator = modificationOperators();
        break;
      case ASSIGN:
        operator = assignmentOperator();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nValue = expression();
      jj_consume_token(SEMICOLON);
                        varName.setValue(tVarName.image);
                        //value.setValue(nValue);

                        mNode.addChild(varName);
                        mNode.addChild(nValue);
                        mNode.addChild(operator);

                        {if (true) return mNode;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tVarName = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
          tOperator = jj_consume_token(INC);
          break;
        case DEC:
          tOperator = jj_consume_token(DEC);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
                        operator = new stringNode();
                        varName.setValue(tVarName.image);
                        operator.setValue(tOperator.image);

                        mNode.addChild(varName);
                        mNode.addChild(operator);

                        {if (true) return mNode;}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public modificationNode modificationBody() throws ParseException {
        modificationNode mNode = new modificationNode();
        Token tVarName, tOperator;
        constantNode nValue;
        stringNode varName = new stringNode();
        stringNode operator;
        constantNode value = new constantNode();
    if (jj_2_2(2)) {
      tVarName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_ASSIGN:
      case SUB_ASSIGN:
      case MUL_ASSIGN:
      case DIV_ASSIGN:
      case REM_ASSIGN:
      case SHL_ASSIGN:
      case SHR_ASSIGN:
      case AND_ASSIGN:
      case OR_ASSIGN:
      case XOR_ASSIGN:
        operator = modificationOperators();
        break;
      case ASSIGN:
        operator = assignmentOperator();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nValue = expression();
                        varName.setValue(tVarName.image);
                        //value.setValue(nValue);

                        mNode.addChild(varName);
                        mNode.addChild(nValue);
                        mNode.addChild(operator);

                        {if (true) return mNode;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tVarName = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
          tOperator = jj_consume_token(INC);
          break;
        case DEC:
          tOperator = jj_consume_token(DEC);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        operator = new stringNode();
                        varName.setValue(tVarName.image);
                        operator.setValue(tOperator.image);

                        mNode.addChild(varName);
                        mNode.addChild(operator);

                        {if (true) return mNode;}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public gotoNode gotoStatement() throws ParseException {
        gotoNode gNode = new gotoNode();
        stringNode lNode = new stringNode();
        blockNode bNode = new blockNode();
        stringNode eNode = new stringNode();

        Token label;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    bNode = statements();
    jj_consume_token(GOTO_STMT);
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
                lNode.setValue(label.image);

                gNode.addChild(lNode);
                gNode.addChild(bNode);

                {if (true) return gNode;}
    throw new Error("Missing return statement in function");
  }

  final public forNode forStatement() throws ParseException {
        treeNode iNode;
        conditionNode cNode;
        treeNode mNode;
        blockNode bNode = new blockNode();
        forNode fNode = new forNode();
    jj_consume_token(FOR_STMT);
    jj_consume_token(OPEN_P);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
    case FLOAT_TYPE:
    case DOUBLE_TYPE:
      iNode = variableDeclarationBody();
      break;
    case IDENTIFIER:
      iNode = modificationBody();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                fNode.addChild(iNode);
    jj_consume_token(SEMICOLON);
    cNode = conditionBody();
                                                   fNode.addChild(cNode);
    jj_consume_token(SEMICOLON);
    mNode = modificationBody();
                                                     fNode.addChild(mNode);
    jj_consume_token(CLOSE_P);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_8:
    case BASE_10:
    case BASE_16:
    case OPEN_P:
    case IF_STMT:
    case PRINTF:
    case SCANF:
    case WHILE_STMT:
    case FOR_STMT:
    case DO_STMT:
    case SWITCH_STMT:
    case ADD:
    case SUB:
    case TILDE:
    case INT_TYPE:
    case FLOAT_TYPE:
    case DOUBLE_TYPE:
    case IDENTIFIER:
      bNode = statement();
                                fNode.addChild(bNode);
      break;
    case OPEN_CB:
      jj_consume_token(OPEN_CB);
      bNode = statements();
                                                fNode.addChild(bNode);
      jj_consume_token(CLOSE_CB);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return fNode;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode expression() throws ParseException {
        constantNode result = new constantNode();
    result = A_expression();
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode A_expression() throws ParseException {
        expressionNode exp = new expressionNode();
        constantNode a;
        constantNode b;
    a = B_expression();
    label_9:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(BITWISE_OR);
      b = A_expression();
                  a = a.Operation("|", b);
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode B_expression() throws ParseException {
        expressionNode exp = new expressionNode();
        constantNode a;
        constantNode b;
    a = C_expression();
    label_10:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(BITWISE_XOR);
      b = B_expression();
                  a = a.Operation("^", b);
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode C_expression() throws ParseException {
        expressionNode exp = new expressionNode();
        constantNode a;
        constantNode b;
    a = D_expression();
    label_11:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(BITWISE_AND);
      b = C_expression();
                                                     a = a.Operation("&", b);
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode D_expression() throws ParseException {
        expressionNode exp = new expressionNode();
        constantNode a;
        constantNode b;
        Token op;
    a = E_expression();
    label_12:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHL:
        op = jj_consume_token(SHL);
        b = D_expression();
        break;
      case SHR:
        op = jj_consume_token(SHR);
        b = D_expression();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        a = a.Operation(op.image, b);
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode E_expression() throws ParseException {
    constantNode a;
    constantNode b;
    Token op;
    a = F_expression();
    label_13:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        op = jj_consume_token(ADD);
        b = E_expression();
        break;
      case SUB:
        op = jj_consume_token(SUB);
        b = E_expression();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        a = a.Operation(op.image, b);
    }
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode F_expression() throws ParseException {
    constantNode a;
    constantNode b;
    Token op;
    a = G_expression();
    label_14:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        op = jj_consume_token(MUL);
        b = F_expression();
        break;
      case DIV:
        op = jj_consume_token(DIV);
        b = F_expression();
        break;
      case REM:
        op = jj_consume_token(REM);
        b = F_expression();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        a = a.Operation(op.image, b);
    }
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode G_expression() throws ParseException {
        constantNode value = new constantNode();
        Token op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        op = jj_consume_token(ADD);
        break;
      case SUB:
        op = jj_consume_token(SUB);
        break;
      case TILDE:
        op = jj_consume_token(TILDE);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    value = H_expression();
                if (op != null) {
                        value.setUnaryOperator(op.image);
                }
                {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode H_expression() throws ParseException {
        Token temp;
        Token op;
        double val;
        boolean isVariable;
        constantNode exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_P:
      jj_consume_token(OPEN_P);
      exp = A_expression();
      jj_consume_token(CLOSE_P);
                        {if (true) return exp;}
      break;
    case BASE_8:
    case BASE_10:
    case BASE_16:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE_8:
      case BASE_10:
      case BASE_16:
        temp = number();
                                                    isVariable = false;
        break;
      case IDENTIFIER:
        temp = jj_consume_token(IDENTIFIER);
                                                isVariable = true;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        constantNode cNode = new constantNode();
                        if (isVariable) {
                                cNode.setValue(temp.image, true);
                        }
                        else {
                                cNode.setValue(temp.image);
                        }
                        {if (true) return cNode;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token number() throws ParseException {
        Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE_10:
      value = jj_consume_token(BASE_10);
      break;
    case BASE_8:
      value = jj_consume_token(BASE_8);
      break;
    case BASE_16:
      value = jj_consume_token(BASE_16);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode string() throws ParseException {
        Token temp;
        constantNode cNode = new constantNode();
    temp = jj_consume_token(STRING);
                cNode.setValue(temp.image);
                {if (true) return cNode;}
    throw new Error("Missing return statement in function");
  }

  final public constantNode character() throws ParseException {
        Token temp;
        constantNode cNode = new constantNode();
    temp = jj_consume_token(CHAR);
                cNode.setValue(temp.image);
                {if (true) return cNode;}
    throw new Error("Missing return statement in function");
  }

  final public blockNode statements() throws ParseException {
        treeNode tNode;
        blockNode bNode = new blockNode();
    label_15:
    while (true) {
      tNode = statement();
                        bNode.addChild(tNode);
      if (jj_2_9(2)) {
        ;
      } else {
        break label_15;
      }
    }
                {if (true) return bNode;}
    throw new Error("Missing return statement in function");
  }

  final public blockNode statement() throws ParseException {
        Object tNode;
        blockNode bNode = new blockNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF_STMT:
      tNode = ifStatement();
      break;
    case PRINTF:
      tNode = printfStatement();
      break;
    case SCANF:
      tNode = scanfStatement();
      break;
    case WHILE_STMT:
      tNode = whileStatement();
      break;
    case DO_STMT:
      tNode = doWhileStatement();
      break;
    case FOR_STMT:
      tNode = forStatement();
      break;
    case SWITCH_STMT:
      tNode = switchStatement();
      break;
    default:
      jj_la1[40] = jj_gen;
      if (jj_2_10(2)) {
        tNode = modification();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BASE_8:
        case BASE_10:
        case BASE_16:
        case OPEN_P:
        case ADD:
        case SUB:
        case TILDE:
        case IDENTIFIER:
          //tNode = gotoStatement()			|
                                  tNode = expression();
          break;
        case INT_TYPE:
        case FLOAT_TYPE:
        case DOUBLE_TYPE:
          tNode = variableDeclaration();
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                        if (typeCheck.isNumeric(tNode)) {
                                constantNode cNode = new constantNode();
                                cNode.setValue(tNode);
                                bNode.addChild((treeNode)cNode);
                        }
                        else {
                                bNode.addChild((treeNode)tNode);
                        }
                        {if (true) return bNode;}
    throw new Error("Missing return statement in function");
  }

  void skipToNextCommand() throws ParseException {
        ParseException e = generateParseException();
        System.out.print("Exception ................ statement is ignored \u005cn");

        Token t;

        do
        {
                t = getNextToken();
                System.out.print("Token is ignored" + t.image);
        } while (t.kind != SEMICOLON);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(IF_STMT)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(SHR)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(SHL)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(SWITCH_STMT)) return true;
    if (jj_scan_token(OPEN_P)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(SCANF)) return true;
    if (jj_scan_token(OPEN_P)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(OPEN_CB)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(OPEN_P)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(BITWISE_AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(DO_STMT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(FOR_STMT)) return true;
    if (jj_scan_token(OPEN_P)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(BITWISE_XOR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(OPEN_P)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(REM)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(WHILE_STMT)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(PRINTF)) return true;
    if (jj_scan_token(OPEN_P)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(BITWISE_OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public C_CompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf4004700,0xf4005700,0xf4004700,0x8001000,0xf4004700,0x8001000,0x8001000,0x0,0x0,0x0,0x40000,0x40000,0x4700,0x3f00000,0x0,0x0,0xf4004700,0xf4005700,0xf4004700,0xf4005700,0x0,0x80000,0x0,0x80000,0x80000,0x0,0x0,0x80000,0x0,0x0,0x0,0xf4005700,0x0,0x0,0x0,0x0,0x0,0x700,0x4700,0x700,0xf4000000,0x4700,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x230006,0x230006,0x230006,0x0,0x230006,0x0,0x0,0x10,0x8,0x20,0x0,0x0,0x2300c0,0x0,0x1f0000,0xffc00000,0x230006,0x230006,0x230006,0x230006,0x0,0x0,0x0,0x0,0xffc00000,0xc000,0x0,0xffc00000,0xc000,0x0,0x0,0x230006,0x1800,0x30000,0x1c0000,0x230000,0x230000,0x0,0x0,0x0,0x6,0x230000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x17,0x17,0x17,0x0,0x17,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x17,0x17,0x17,0x17,0x7,0x0,0x7,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x17,0x17,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x17,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public C_Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public C_Compiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new C_CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public C_Compiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new C_CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public C_Compiler(C_CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(C_CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
